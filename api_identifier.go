/*
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * API version: 2.7.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package dhlapi

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type IdentifierApiService service

/*
IdentifierApiService Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments
Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments. Requires authorization to use this service from DHL Express.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountNumber DHL Express customer account number
 * @param type_ Type of DHL Express identifier to retrieve
 * @param size Number of identifiers to be retrieved
 * @param optional nil or *IdentifierApiExpApiIdentifiersOpts - Optional Parameters:
     * @param "MessageReference" (optional.String) -  Please provide message reference
     * @param "MessageReferenceDate" (optional.String) -  Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     * @param "PluginName" (optional.String) -  Please provide name of the plugin (applicable to 3PV only)
     * @param "PluginVersion" (optional.String) -  Please provide version of the plugin (applicable to 3PV only)
     * @param "ShippingSystemPlatformName" (optional.String) -  Please provide name of the shipping platform(applicable to 3PV only)
     * @param "ShippingSystemPlatformVersion" (optional.String) -  Please provide version of the shipping platform (applicable to 3PV only)
     * @param "WebstorePlatformName" (optional.String) -  Please provide name of the webstore platform (applicable to 3PV only)
     * @param "WebstorePlatformVersion" (optional.String) -  Please provide version of the webstore platform (applicable to 3PV only)
@return SupermodelIoLogisticsExpressIdentifierResponse
*/

type IdentifierApiExpApiIdentifiersOpts struct {
	MessageReference              optional.String
	MessageReferenceDate          optional.String
	PluginName                    optional.String
	PluginVersion                 optional.String
	ShippingSystemPlatformName    optional.String
	ShippingSystemPlatformVersion optional.String
	WebstorePlatformName          optional.String
	WebstorePlatformVersion       optional.String
}

func (a *IdentifierApiService) ExpApiIdentifiers(ctx context.Context, accountNumber string, type_ string, size string, localVarOptionals *IdentifierApiExpApiIdentifiersOpts) (SupermodelIoLogisticsExpressIdentifierResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue SupermodelIoLogisticsExpressIdentifierResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/identifiers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("accountNumber", parameterToString(accountNumber, ""))
	localVarQueryParams.Add("type", parameterToString(type_, ""))
	localVarQueryParams.Add("size", parameterToString(size, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.MessageReference.IsSet() {
		localVarHeaderParams["Message-Reference"] = parameterToString(localVarOptionals.MessageReference.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.MessageReferenceDate.IsSet() {
		localVarHeaderParams["Message-Reference-Date"] = parameterToString(localVarOptionals.MessageReferenceDate.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.PluginName.IsSet() {
		localVarHeaderParams["Plugin-Name"] = parameterToString(localVarOptionals.PluginName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.PluginVersion.IsSet() {
		localVarHeaderParams["Plugin-Version"] = parameterToString(localVarOptionals.PluginVersion.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ShippingSystemPlatformName.IsSet() {
		localVarHeaderParams["Shipping-System-Platform-Name"] = parameterToString(localVarOptionals.ShippingSystemPlatformName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ShippingSystemPlatformVersion.IsSet() {
		localVarHeaderParams["Shipping-System-Platform-Version"] = parameterToString(localVarOptionals.ShippingSystemPlatformVersion.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.WebstorePlatformName.IsSet() {
		localVarHeaderParams["Webstore-Platform-Name"] = parameterToString(localVarOptionals.WebstorePlatformName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.WebstorePlatformVersion.IsSet() {
		localVarHeaderParams["Webstore-Platform-Version"] = parameterToString(localVarOptionals.WebstorePlatformVersion.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v SupermodelIoLogisticsExpressIdentifierResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v SupermodelIoLogisticsExpressErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
