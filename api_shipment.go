/*
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * API version: 2.7.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package dhlapi

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ShipmentApiService service

/*
ShipmentApiService Create Shipment
## Create Shipment The ShipmentRequest Operation will allow you to generate an AWB number and piece IDs, generate a shipping label, transmit manifest shipment detail to DHL, and optionally book a courier for the pickup of a shipment. The key elements in the response of the Shipment Request will be a base64 encoded PDF label and the Shipment and Piece identification numbers, which you can use for tracking on the DHL web site. While the RateRequest and ShipmentRequest services can be used independently, DHL recommends the use of RateRequest to first validate the products available for the shipper/receiver. The global product codes which are output during the RateResponse can be used directly as input into the Shipment Request, as both perform similar validations in terms of service capability.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body Details about the shipment to be created
 * @param optional nil or *ShipmentApiExpApiShipmentsOpts - Optional Parameters:
     * @param "MessageReference" (optional.String) -  Please provide message reference
     * @param "MessageReferenceDate" (optional.String) -  Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     * @param "PluginName" (optional.String) -  Please provide name of the plugin (applicable to 3PV only)
     * @param "PluginVersion" (optional.String) -  Please provide version of the plugin (applicable to 3PV only)
     * @param "ShippingSystemPlatformName" (optional.String) -  Please provide name of the shipping platform(applicable to 3PV only)
     * @param "ShippingSystemPlatformVersion" (optional.String) -  Please provide version of the shipping platform (applicable to 3PV only)
     * @param "WebstorePlatformName" (optional.String) -  Please provide name of the webstore platform (applicable to 3PV only)
     * @param "WebstorePlatformVersion" (optional.String) -  Please provide version of the webstore platform (applicable to 3PV only)
     * @param "StrictValidation" (optional.Bool) -  If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request.
@return SupermodelIoLogisticsExpressCreateShipmentResponse
*/

type ShipmentApiExpApiShipmentsOpts struct {
	MessageReference              optional.String
	MessageReferenceDate          optional.String
	PluginName                    optional.String
	PluginVersion                 optional.String
	ShippingSystemPlatformName    optional.String
	ShippingSystemPlatformVersion optional.String
	WebstorePlatformName          optional.String
	WebstorePlatformVersion       optional.String
	StrictValidation              optional.Bool
}

func (a *ShipmentApiService) ExpApiShipments(ctx context.Context, body SupermodelIoLogisticsExpressCreateShipmentRequest, localVarOptionals *ShipmentApiExpApiShipmentsOpts) (SupermodelIoLogisticsExpressCreateShipmentResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue SupermodelIoLogisticsExpressCreateShipmentResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/shipments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StrictValidation.IsSet() {
		localVarQueryParams.Add("strictValidation", parameterToString(localVarOptionals.StrictValidation.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.MessageReference.IsSet() {
		localVarHeaderParams["Message-Reference"] = parameterToString(localVarOptionals.MessageReference.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.MessageReferenceDate.IsSet() {
		localVarHeaderParams["Message-Reference-Date"] = parameterToString(localVarOptionals.MessageReferenceDate.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.PluginName.IsSet() {
		localVarHeaderParams["Plugin-Name"] = parameterToString(localVarOptionals.PluginName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.PluginVersion.IsSet() {
		localVarHeaderParams["Plugin-Version"] = parameterToString(localVarOptionals.PluginVersion.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ShippingSystemPlatformName.IsSet() {
		localVarHeaderParams["Shipping-System-Platform-Name"] = parameterToString(localVarOptionals.ShippingSystemPlatformName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ShippingSystemPlatformVersion.IsSet() {
		localVarHeaderParams["Shipping-System-Platform-Version"] = parameterToString(localVarOptionals.ShippingSystemPlatformVersion.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.WebstorePlatformName.IsSet() {
		localVarHeaderParams["Webstore-Platform-Name"] = parameterToString(localVarOptionals.WebstorePlatformName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.WebstorePlatformVersion.IsSet() {
		localVarHeaderParams["Webstore-Platform-Version"] = parameterToString(localVarOptionals.WebstorePlatformVersion.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 201 {
			var v SupermodelIoLogisticsExpressCreateShipmentResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v SupermodelIoLogisticsExpressErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 422 {
			var v SupermodelIoLogisticsExpressErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v SupermodelIoLogisticsExpressErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ShipmentApiService Get Image
The Get Image service can be used to retrieve customer&#x27;s own uploaded Commercial Invoice, Waybill Document  or supporting documents that uploaded during shipment creation.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param shipmentTrackingNumber DHL Express shipment identification number
 * @param shipperAccountNumber DHL Express customer shipper account number
 * @param typeCode Please provide correct document type.
 * @param pickupYearAndMonth Please provide the pickup&#x27;s date in YYYY-MM format
 * @param optional nil or *ShipmentApiExpApiShipmentsDocumentimageOpts - Optional Parameters:
     * @param "EncodingFormat" (optional.String) -  Please provide the document image encoding format in pdf or tiff format
     * @param "AllInOnePDF" (optional.Bool) -  Option to return all the document images in a single PDF file
     * @param "CompressedPackage" (optional.Bool) -  Option to return all the document images in a compressed package
     * @param "MessageReference" (optional.String) -  Please provide message reference
     * @param "MessageReferenceDate" (optional.String) -  Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     * @param "PluginName" (optional.String) -  Please provide name of the plugin (applicable to 3PV only)
     * @param "PluginVersion" (optional.String) -  Please provide version of the plugin (applicable to 3PV only)
     * @param "ShippingSystemPlatformName" (optional.String) -  Please provide name of the shipping platform(applicable to 3PV only)
     * @param "ShippingSystemPlatformVersion" (optional.String) -  Please provide version of the shipping platform (applicable to 3PV only)
     * @param "WebstorePlatformName" (optional.String) -  Please provide name of the webstore platform (applicable to 3PV only)
     * @param "WebstorePlatformVersion" (optional.String) -  Please provide version of the webstore platform (applicable to 3PV only)
@return SupermodelIoLogisticsExpressDocumentImageResponse
*/

type ShipmentApiExpApiShipmentsDocumentimageOpts struct {
	EncodingFormat                optional.String
	AllInOnePDF                   optional.Bool
	CompressedPackage             optional.Bool
	MessageReference              optional.String
	MessageReferenceDate          optional.String
	PluginName                    optional.String
	PluginVersion                 optional.String
	ShippingSystemPlatformName    optional.String
	ShippingSystemPlatformVersion optional.String
	WebstorePlatformName          optional.String
	WebstorePlatformVersion       optional.String
}

func (a *ShipmentApiService) ExpApiShipmentsDocumentimage(ctx context.Context, shipmentTrackingNumber string, shipperAccountNumber string, typeCode string, pickupYearAndMonth string, localVarOptionals *ShipmentApiExpApiShipmentsDocumentimageOpts) (SupermodelIoLogisticsExpressDocumentImageResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue SupermodelIoLogisticsExpressDocumentImageResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/shipments/{shipmentTrackingNumber}/get-image"
	localVarPath = strings.Replace(localVarPath, "{"+"shipmentTrackingNumber"+"}", fmt.Sprintf("%v", shipmentTrackingNumber), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("shipperAccountNumber", parameterToString(shipperAccountNumber, ""))
	localVarQueryParams.Add("typeCode", parameterToString(typeCode, ""))
	localVarQueryParams.Add("pickupYearAndMonth", parameterToString(pickupYearAndMonth, ""))
	if localVarOptionals != nil && localVarOptionals.EncodingFormat.IsSet() {
		localVarQueryParams.Add("encodingFormat", parameterToString(localVarOptionals.EncodingFormat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AllInOnePDF.IsSet() {
		localVarQueryParams.Add("allInOnePDF", parameterToString(localVarOptionals.AllInOnePDF.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompressedPackage.IsSet() {
		localVarQueryParams.Add("compressedPackage", parameterToString(localVarOptionals.CompressedPackage.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.MessageReference.IsSet() {
		localVarHeaderParams["Message-Reference"] = parameterToString(localVarOptionals.MessageReference.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.MessageReferenceDate.IsSet() {
		localVarHeaderParams["Message-Reference-Date"] = parameterToString(localVarOptionals.MessageReferenceDate.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.PluginName.IsSet() {
		localVarHeaderParams["Plugin-Name"] = parameterToString(localVarOptionals.PluginName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.PluginVersion.IsSet() {
		localVarHeaderParams["Plugin-Version"] = parameterToString(localVarOptionals.PluginVersion.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ShippingSystemPlatformName.IsSet() {
		localVarHeaderParams["Shipping-System-Platform-Name"] = parameterToString(localVarOptionals.ShippingSystemPlatformName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ShippingSystemPlatformVersion.IsSet() {
		localVarHeaderParams["Shipping-System-Platform-Version"] = parameterToString(localVarOptionals.ShippingSystemPlatformVersion.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.WebstorePlatformName.IsSet() {
		localVarHeaderParams["Webstore-Platform-Name"] = parameterToString(localVarOptionals.WebstorePlatformName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.WebstorePlatformVersion.IsSet() {
		localVarHeaderParams["Webstore-Platform-Version"] = parameterToString(localVarOptionals.WebstorePlatformVersion.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v SupermodelIoLogisticsExpressDocumentImageResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v SupermodelIoLogisticsExpressErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v SupermodelIoLogisticsExpressErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ShipmentApiService Electronic Proof of Delivery
The electronic proof of delivery service can be used to retrieve proof of delivery for certain delivered DHL Express shipments
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param shipmentTrackingNumber DHL Express shipment identification number
 * @param optional nil or *ShipmentApiExpApiShipmentsEpodOpts - Optional Parameters:
     * @param "ShipperAccountNumber" (optional.String) -  DHL Express customer shipper account number
     * @param "Content" (optional.String) -
     * @param "MessageReference" (optional.String) -  Please provide message reference
     * @param "MessageReferenceDate" (optional.String) -  Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     * @param "PluginName" (optional.String) -  Please provide name of the plugin (applicable to 3PV only)
     * @param "PluginVersion" (optional.String) -  Please provide version of the plugin (applicable to 3PV only)
     * @param "ShippingSystemPlatformName" (optional.String) -  Please provide name of the shipping platform(applicable to 3PV only)
     * @param "ShippingSystemPlatformVersion" (optional.String) -  Please provide version of the shipping platform (applicable to 3PV only)
     * @param "WebstorePlatformName" (optional.String) -  Please provide name of the webstore platform (applicable to 3PV only)
     * @param "WebstorePlatformVersion" (optional.String) -  Please provide version of the webstore platform (applicable to 3PV only)
@return SupermodelIoLogisticsExpressEpodResponse
*/

type ShipmentApiExpApiShipmentsEpodOpts struct {
	ShipperAccountNumber          optional.String
	Content                       optional.String
	MessageReference              optional.String
	MessageReferenceDate          optional.String
	PluginName                    optional.String
	PluginVersion                 optional.String
	ShippingSystemPlatformName    optional.String
	ShippingSystemPlatformVersion optional.String
	WebstorePlatformName          optional.String
	WebstorePlatformVersion       optional.String
}

func (a *ShipmentApiService) ExpApiShipmentsEpod(ctx context.Context, shipmentTrackingNumber string, localVarOptionals *ShipmentApiExpApiShipmentsEpodOpts) (SupermodelIoLogisticsExpressEpodResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue SupermodelIoLogisticsExpressEpodResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/shipments/{shipmentTrackingNumber}/proof-of-delivery"
	localVarPath = strings.Replace(localVarPath, "{"+"shipmentTrackingNumber"+"}", fmt.Sprintf("%v", shipmentTrackingNumber), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ShipperAccountNumber.IsSet() {
		localVarQueryParams.Add("shipperAccountNumber", parameterToString(localVarOptionals.ShipperAccountNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Content.IsSet() {
		localVarQueryParams.Add("content", parameterToString(localVarOptionals.Content.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.MessageReference.IsSet() {
		localVarHeaderParams["Message-Reference"] = parameterToString(localVarOptionals.MessageReference.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.MessageReferenceDate.IsSet() {
		localVarHeaderParams["Message-Reference-Date"] = parameterToString(localVarOptionals.MessageReferenceDate.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.PluginName.IsSet() {
		localVarHeaderParams["Plugin-Name"] = parameterToString(localVarOptionals.PluginName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.PluginVersion.IsSet() {
		localVarHeaderParams["Plugin-Version"] = parameterToString(localVarOptionals.PluginVersion.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ShippingSystemPlatformName.IsSet() {
		localVarHeaderParams["Shipping-System-Platform-Name"] = parameterToString(localVarOptionals.ShippingSystemPlatformName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ShippingSystemPlatformVersion.IsSet() {
		localVarHeaderParams["Shipping-System-Platform-Version"] = parameterToString(localVarOptionals.ShippingSystemPlatformVersion.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.WebstorePlatformName.IsSet() {
		localVarHeaderParams["Webstore-Platform-Name"] = parameterToString(localVarOptionals.WebstorePlatformName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.WebstorePlatformVersion.IsSet() {
		localVarHeaderParams["Webstore-Platform-Version"] = parameterToString(localVarOptionals.WebstorePlatformVersion.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v SupermodelIoLogisticsExpressEpodResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v SupermodelIoLogisticsExpressErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v SupermodelIoLogisticsExpressErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ShipmentApiService Upload Paperless Trade shipment (PLT) images of previously created shipment.
The upload-image service can be used to upload PLT images to a previously created shipment.  The PLT images for the shipment can be uploaded before the shipment has been physically  collected by DHL courier. However, the original shipment must contain WY as the special service otherwise,  an error will be returned when the customer wants to use the reupload function in this upload-image service.    IMPORTANT: Please note that at least 10mins must be given between the initial createShipment request and then  the upload-image request (including subsequent upload-image request).
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body Details about the shipment images
  - @param shipmentTrackingNumber DHL Express shipment identification number
*/
func (a *ShipmentApiService) ExpApiShipmentsImgUpload(ctx context.Context, body SupermodelIoLogisticsExpressImageUploadRequest, shipmentTrackingNumber string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Patch")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/shipments/{shipmentTrackingNumber}/upload-image"
	localVarPath = strings.Replace(localVarPath, "{"+"shipmentTrackingNumber"+"}", fmt.Sprintf("%v", shipmentTrackingNumber), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v SupermodelIoLogisticsExpressErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v SupermodelIoLogisticsExpressErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 422 {
			var v SupermodelIoLogisticsExpressErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarHttpResponse, newErr
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ShipmentApiService Upload Commercial Invoice data for your DHL Express shipment
## Upload Invoice Data with Shipment ID The upload invoice data service can be used to upload Commerical Invoice data with Shipment Identification Number for your DHL Express shipment.Customer can provide Commercial Invoice data before Shipment Data via Create Shipment flow or vice versa.  Important Note: UploadInvoiceData service is not enabled by default and must be requested per customer. Use of this service is only enabled on exceptional basis and DHL Express recommends to submit shipment requests together with a commercial invoice data.To enable use of UploadInvoiceData service, please contact your DHL Express IT representative. To use UploadInvoiceData service, it is required that \&quot;PM\&quot; service code is provided in MyDHL API Create Shipment request. \&quot;PM\&quot; service code is not enabled by  default for the customers, and needs to be enabled upon request.  When Shipment is created via MyDHL API Create Shipment service before uploading the Commercial Invoice (CIN) data,it is mandatory to provide the Shipment Identification Number as received in MyDHL API Create Shipment service Response. When Commercial Invoice (CIN) data is uploaded prior to creating a shipment via MyDHL API Create Shipment service, it is mandatory to provide Invoice Reference Number with Invoice Reference Type value \&quot;CU\&quot; and Shipper Account Number.   These elements are mandatory to facilitate an effective data merge of the Commercial Invoice (CIN) data with Shipment Data. As an output customer will receive Notification element value &#x27;0&#x27; on successful upload of Commercial Invoice (CIN) data.  DHL backend application performs the subsequent data merging process of the Shipment Data and Commercial Invoice data.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body Details about the invoice data
 * @param shipmentTrackingNumber DHL Express shipment identification number
 * @param optional nil or *ShipmentApiExpApiShipmentsInvoiceDataAwbOpts - Optional Parameters:
     * @param "MessageReference" (optional.String) -  Please provide message reference
     * @param "MessageReferenceDate" (optional.String) -  Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     * @param "PluginName" (optional.String) -  Please provide name of the plugin (applicable to 3PV only)
     * @param "PluginVersion" (optional.String) -  Please provide version of the plugin (applicable to 3PV only)
     * @param "ShippingSystemPlatformName" (optional.String) -  Please provide name of the shipping platform(applicable to 3PV only)
     * @param "ShippingSystemPlatformVersion" (optional.String) -  Please provide version of the shipping platform (applicable to 3PV only)
     * @param "WebstorePlatformName" (optional.String) -  Please provide name of the webstore platform (applicable to 3PV only)
     * @param "WebstorePlatformVersion" (optional.String) -  Please provide version of the webstore platform (applicable to 3PV only)

*/

type ShipmentApiExpApiShipmentsInvoiceDataAwbOpts struct {
	MessageReference              optional.String
	MessageReferenceDate          optional.String
	PluginName                    optional.String
	PluginVersion                 optional.String
	ShippingSystemPlatformName    optional.String
	ShippingSystemPlatformVersion optional.String
	WebstorePlatformName          optional.String
	WebstorePlatformVersion       optional.String
}

func (a *ShipmentApiService) ExpApiShipmentsInvoiceDataAwb(ctx context.Context, body SupermodelIoLogisticsExpressUploadInvoiceDataRequest, shipmentTrackingNumber string, localVarOptionals *ShipmentApiExpApiShipmentsInvoiceDataAwbOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Patch")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/shipments/{shipmentTrackingNumber}/upload-invoice-data"
	localVarPath = strings.Replace(localVarPath, "{"+"shipmentTrackingNumber"+"}", fmt.Sprintf("%v", shipmentTrackingNumber), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.MessageReference.IsSet() {
		localVarHeaderParams["Message-Reference"] = parameterToString(localVarOptionals.MessageReference.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.MessageReferenceDate.IsSet() {
		localVarHeaderParams["Message-Reference-Date"] = parameterToString(localVarOptionals.MessageReferenceDate.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.PluginName.IsSet() {
		localVarHeaderParams["Plugin-Name"] = parameterToString(localVarOptionals.PluginName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.PluginVersion.IsSet() {
		localVarHeaderParams["Plugin-Version"] = parameterToString(localVarOptionals.PluginVersion.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ShippingSystemPlatformName.IsSet() {
		localVarHeaderParams["Shipping-System-Platform-Name"] = parameterToString(localVarOptionals.ShippingSystemPlatformName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ShippingSystemPlatformVersion.IsSet() {
		localVarHeaderParams["Shipping-System-Platform-Version"] = parameterToString(localVarOptionals.ShippingSystemPlatformVersion.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.WebstorePlatformName.IsSet() {
		localVarHeaderParams["Webstore-Platform-Name"] = parameterToString(localVarOptionals.WebstorePlatformName.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.WebstorePlatformVersion.IsSet() {
		localVarHeaderParams["Webstore-Platform-Version"] = parameterToString(localVarOptionals.WebstorePlatformVersion.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v SupermodelIoLogisticsExpressErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 422 {
			var v SupermodelIoLogisticsExpressErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarHttpResponse, newErr
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
